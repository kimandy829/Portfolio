"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Helper = Helper;
exports.createHelper = createHelper;
exports.shallowCopy = shallowCopy;
exports.noop = noop;
exports.warnOnMissing = warnOnMissing;
exports.throwOnMissing = throwOnMissing;

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var slice = Array.prototype.slice;

function Helper(fn, args) {
  this.fn = fn;
  this.args = slice.call(args);
}

function createHelper(handler) {
  return function () {
    if (arguments.length < 2) {
      return new Helper(handler, arguments);
    } else {
      var args = slice.call(arguments, 1);
      args.unshift(shallowCopy(arguments[0]));
      return handler.apply(null, args);
    }
  };
}

function shallowCopy(obj) {
  return Array.isArray(obj) ? _toConsumableArray(obj) : _objectSpread({}, obj);
} // Default helpers for handling lookup key missing object scenario.
// To be used as values assigned to `update.onLookupMissingObject` property.


function noop() {}

function warnOnMissing(obj, key) {
  if ((typeof console === "undefined" ? "undefined" : _typeof(console)) !== undefined) {
    // eslint-disable-next-line no-console, no-undef
    (console.warn || console.log)("update-js: No object found by ".concat(key, ", update ignored. Collection:"), obj);
  }
}

function throwOnMissing(obj, key) {
  throw new Error("update-js: No object found by ".concat(key, ", autocreate is not supported."));
}